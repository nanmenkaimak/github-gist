// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mocks/mock.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	entity "github.com/nanmenkaimak/github-gist/internal/gist/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockRepository) CreateComment(newComment entity.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", newComment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockRepositoryMockRecorder) CreateComment(newComment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockRepository)(nil).CreateComment), newComment)
}

// CreateGist mocks base method.
func (m *MockRepository) CreateGist(request entity.GistRequest) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGist", request)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGist indicates an expected call of CreateGist.
func (mr *MockRepositoryMockRecorder) CreateGist(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGist", reflect.TypeOf((*MockRepository)(nil).CreateGist), request)
}

// DeleteComment mocks base method.
func (m *MockRepository) DeleteComment(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockRepositoryMockRecorder) DeleteComment(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockRepository)(nil).DeleteComment), id)
}

// DeleteFork mocks base method.
func (m *MockRepository) DeleteFork(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFork", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFork indicates an expected call of DeleteFork.
func (mr *MockRepositoryMockRecorder) DeleteFork(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFork", reflect.TypeOf((*MockRepository)(nil).DeleteFork), id)
}

// DeleteGistByID mocks base method.
func (m *MockRepository) DeleteGistByID(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGistByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGistByID indicates an expected call of DeleteGistByID.
func (mr *MockRepositoryMockRecorder) DeleteGistByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGistByID", reflect.TypeOf((*MockRepository)(nil).DeleteGistByID), id)
}

// DeleteStar mocks base method.
func (m *MockRepository) DeleteStar(gistID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStar", gistID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStar indicates an expected call of DeleteStar.
func (mr *MockRepositoryMockRecorder) DeleteStar(gistID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStar", reflect.TypeOf((*MockRepository)(nil).DeleteStar), gistID, userID)
}

// ForkGist mocks base method.
func (m *MockRepository) ForkGist(newFork entity.Fork) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForkGist", newFork)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForkGist indicates an expected call of ForkGist.
func (mr *MockRepositoryMockRecorder) ForkGist(newFork any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForkGist", reflect.TypeOf((*MockRepository)(nil).ForkGist), newFork)
}

// GetAllCommentsOfGist mocks base method.
func (m *MockRepository) GetAllCommentsOfGist(gistID uuid.UUID) ([]entity.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCommentsOfGist", gistID)
	ret0, _ := ret[0].([]entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCommentsOfGist indicates an expected call of GetAllCommentsOfGist.
func (mr *MockRepositoryMockRecorder) GetAllCommentsOfGist(gistID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCommentsOfGist", reflect.TypeOf((*MockRepository)(nil).GetAllCommentsOfGist), gistID)
}

// GetAllGistsOfUser mocks base method.
func (m *MockRepository) GetAllGistsOfUser(userID uuid.UUID, ownGists bool, searchingStr string) ([]entity.GistRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGistsOfUser", userID, ownGists, searchingStr)
	ret0, _ := ret[0].([]entity.GistRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGistsOfUser indicates an expected call of GetAllGistsOfUser.
func (mr *MockRepositoryMockRecorder) GetAllGistsOfUser(userID, ownGists, searchingStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGistsOfUser", reflect.TypeOf((*MockRepository)(nil).GetAllGistsOfUser), userID, ownGists, searchingStr)
}

// GetAllStargazers mocks base method.
func (m *MockRepository) GetAllStargazers() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllStargazers")
}

// GetAllStargazers indicates an expected call of GetAllStargazers.
func (mr *MockRepositoryMockRecorder) GetAllStargazers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStargazers", reflect.TypeOf((*MockRepository)(nil).GetAllStargazers))
}

// GetForkedGistByUser mocks base method.
func (m *MockRepository) GetForkedGistByUser(userID uuid.UUID, ownGists bool) ([]entity.GistRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForkedGistByUser", userID, ownGists)
	ret0, _ := ret[0].([]entity.GistRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForkedGistByUser indicates an expected call of GetForkedGistByUser.
func (mr *MockRepositoryMockRecorder) GetForkedGistByUser(userID, ownGists any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForkedGistByUser", reflect.TypeOf((*MockRepository)(nil).GetForkedGistByUser), userID, ownGists)
}

// GetGistByID mocks base method.
func (m *MockRepository) GetGistByID(gistID uuid.UUID, ownGist bool) (entity.GistRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGistByID", gistID, ownGist)
	ret0, _ := ret[0].(entity.GistRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGistByID indicates an expected call of GetGistByID.
func (mr *MockRepositoryMockRecorder) GetGistByID(gistID, ownGist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGistByID", reflect.TypeOf((*MockRepository)(nil).GetGistByID), gistID, ownGist)
}

// GetGistsByVisibility mocks base method.
func (m *MockRepository) GetGistsByVisibility(userID uuid.UUID, visibility bool) ([]entity.GistRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGistsByVisibility", userID, visibility)
	ret0, _ := ret[0].([]entity.GistRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGistsByVisibility indicates an expected call of GetGistsByVisibility.
func (mr *MockRepositoryMockRecorder) GetGistsByVisibility(userID, visibility any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGistsByVisibility", reflect.TypeOf((*MockRepository)(nil).GetGistsByVisibility), userID, visibility)
}

// GetOtherAllGists mocks base method.
func (m *MockRepository) GetOtherAllGists(sort, direction string) ([]entity.GistRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtherAllGists", sort, direction)
	ret0, _ := ret[0].([]entity.GistRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOtherAllGists indicates an expected call of GetOtherAllGists.
func (mr *MockRepositoryMockRecorder) GetOtherAllGists(sort, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtherAllGists", reflect.TypeOf((*MockRepository)(nil).GetOtherAllGists), sort, direction)
}

// GetStarredGists mocks base method.
func (m *MockRepository) GetStarredGists(userID uuid.UUID) ([]entity.GistRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStarredGists", userID)
	ret0, _ := ret[0].([]entity.GistRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStarredGists indicates an expected call of GetStarredGists.
func (mr *MockRepositoryMockRecorder) GetStarredGists(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStarredGists", reflect.TypeOf((*MockRepository)(nil).GetStarredGists), userID)
}

// StarGist mocks base method.
func (m *MockRepository) StarGist(newStar entity.Star) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StarGist", newStar)
	ret0, _ := ret[0].(error)
	return ret0
}

// StarGist indicates an expected call of StarGist.
func (mr *MockRepositoryMockRecorder) StarGist(newStar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StarGist", reflect.TypeOf((*MockRepository)(nil).StarGist), newStar)
}

// UpdateComment mocks base method.
func (m *MockRepository) UpdateComment(updatedComment entity.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", updatedComment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockRepositoryMockRecorder) UpdateComment(updatedComment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockRepository)(nil).UpdateComment), updatedComment)
}

// UpdateGistByID mocks base method.
func (m *MockRepository) UpdateGistByID(updatedGist entity.GistRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGistByID", updatedGist)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGistByID indicates an expected call of UpdateGistByID.
func (mr *MockRepositoryMockRecorder) UpdateGistByID(updatedGist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGistByID", reflect.TypeOf((*MockRepository)(nil).UpdateGistByID), updatedGist)
}

// MockGistRepository is a mock of GistRepository interface.
type MockGistRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGistRepositoryMockRecorder
}

// MockGistRepositoryMockRecorder is the mock recorder for MockGistRepository.
type MockGistRepositoryMockRecorder struct {
	mock *MockGistRepository
}

// NewMockGistRepository creates a new mock instance.
func NewMockGistRepository(ctrl *gomock.Controller) *MockGistRepository {
	mock := &MockGistRepository{ctrl: ctrl}
	mock.recorder = &MockGistRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGistRepository) EXPECT() *MockGistRepositoryMockRecorder {
	return m.recorder
}

// CreateGist mocks base method.
func (m *MockGistRepository) CreateGist(request entity.GistRequest) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGist", request)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGist indicates an expected call of CreateGist.
func (mr *MockGistRepositoryMockRecorder) CreateGist(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGist", reflect.TypeOf((*MockGistRepository)(nil).CreateGist), request)
}

// DeleteGistByID mocks base method.
func (m *MockGistRepository) DeleteGistByID(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGistByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGistByID indicates an expected call of DeleteGistByID.
func (mr *MockGistRepositoryMockRecorder) DeleteGistByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGistByID", reflect.TypeOf((*MockGistRepository)(nil).DeleteGistByID), id)
}

// GetAllGistsOfUser mocks base method.
func (m *MockGistRepository) GetAllGistsOfUser(userID uuid.UUID, ownGists bool, searchingStr string) ([]entity.GistRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGistsOfUser", userID, ownGists, searchingStr)
	ret0, _ := ret[0].([]entity.GistRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGistsOfUser indicates an expected call of GetAllGistsOfUser.
func (mr *MockGistRepositoryMockRecorder) GetAllGistsOfUser(userID, ownGists, searchingStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGistsOfUser", reflect.TypeOf((*MockGistRepository)(nil).GetAllGistsOfUser), userID, ownGists, searchingStr)
}

// GetGistByID mocks base method.
func (m *MockGistRepository) GetGistByID(gistID uuid.UUID, ownGist bool) (entity.GistRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGistByID", gistID, ownGist)
	ret0, _ := ret[0].(entity.GistRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGistByID indicates an expected call of GetGistByID.
func (mr *MockGistRepositoryMockRecorder) GetGistByID(gistID, ownGist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGistByID", reflect.TypeOf((*MockGistRepository)(nil).GetGistByID), gistID, ownGist)
}

// GetGistsByVisibility mocks base method.
func (m *MockGistRepository) GetGistsByVisibility(userID uuid.UUID, visibility bool) ([]entity.GistRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGistsByVisibility", userID, visibility)
	ret0, _ := ret[0].([]entity.GistRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGistsByVisibility indicates an expected call of GetGistsByVisibility.
func (mr *MockGistRepositoryMockRecorder) GetGistsByVisibility(userID, visibility any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGistsByVisibility", reflect.TypeOf((*MockGistRepository)(nil).GetGistsByVisibility), userID, visibility)
}

// GetOtherAllGists mocks base method.
func (m *MockGistRepository) GetOtherAllGists(sort, direction string) ([]entity.GistRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtherAllGists", sort, direction)
	ret0, _ := ret[0].([]entity.GistRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOtherAllGists indicates an expected call of GetOtherAllGists.
func (mr *MockGistRepositoryMockRecorder) GetOtherAllGists(sort, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtherAllGists", reflect.TypeOf((*MockGistRepository)(nil).GetOtherAllGists), sort, direction)
}

// UpdateGistByID mocks base method.
func (m *MockGistRepository) UpdateGistByID(updatedGist entity.GistRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGistByID", updatedGist)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGistByID indicates an expected call of UpdateGistByID.
func (mr *MockGistRepositoryMockRecorder) UpdateGistByID(updatedGist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGistByID", reflect.TypeOf((*MockGistRepository)(nil).UpdateGistByID), updatedGist)
}

// MockForkRepository is a mock of ForkRepository interface.
type MockForkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockForkRepositoryMockRecorder
}

// MockForkRepositoryMockRecorder is the mock recorder for MockForkRepository.
type MockForkRepositoryMockRecorder struct {
	mock *MockForkRepository
}

// NewMockForkRepository creates a new mock instance.
func NewMockForkRepository(ctrl *gomock.Controller) *MockForkRepository {
	mock := &MockForkRepository{ctrl: ctrl}
	mock.recorder = &MockForkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForkRepository) EXPECT() *MockForkRepositoryMockRecorder {
	return m.recorder
}

// DeleteFork mocks base method.
func (m *MockForkRepository) DeleteFork(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFork", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFork indicates an expected call of DeleteFork.
func (mr *MockForkRepositoryMockRecorder) DeleteFork(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFork", reflect.TypeOf((*MockForkRepository)(nil).DeleteFork), id)
}

// ForkGist mocks base method.
func (m *MockForkRepository) ForkGist(newFork entity.Fork) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForkGist", newFork)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForkGist indicates an expected call of ForkGist.
func (mr *MockForkRepositoryMockRecorder) ForkGist(newFork any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForkGist", reflect.TypeOf((*MockForkRepository)(nil).ForkGist), newFork)
}

// GetForkedGistByUser mocks base method.
func (m *MockForkRepository) GetForkedGistByUser(userID uuid.UUID, ownGists bool) ([]entity.GistRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForkedGistByUser", userID, ownGists)
	ret0, _ := ret[0].([]entity.GistRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForkedGistByUser indicates an expected call of GetForkedGistByUser.
func (mr *MockForkRepositoryMockRecorder) GetForkedGistByUser(userID, ownGists any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForkedGistByUser", reflect.TypeOf((*MockForkRepository)(nil).GetForkedGistByUser), userID, ownGists)
}

// MockCommentRepository is a mock of CommentRepository interface.
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository.
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance.
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentRepository) CreateComment(newComment entity.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", newComment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentRepositoryMockRecorder) CreateComment(newComment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentRepository)(nil).CreateComment), newComment)
}

// DeleteComment mocks base method.
func (m *MockCommentRepository) DeleteComment(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentRepositoryMockRecorder) DeleteComment(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentRepository)(nil).DeleteComment), id)
}

// GetAllCommentsOfGist mocks base method.
func (m *MockCommentRepository) GetAllCommentsOfGist(gistID uuid.UUID) ([]entity.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCommentsOfGist", gistID)
	ret0, _ := ret[0].([]entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCommentsOfGist indicates an expected call of GetAllCommentsOfGist.
func (mr *MockCommentRepositoryMockRecorder) GetAllCommentsOfGist(gistID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCommentsOfGist", reflect.TypeOf((*MockCommentRepository)(nil).GetAllCommentsOfGist), gistID)
}

// UpdateComment mocks base method.
func (m *MockCommentRepository) UpdateComment(updatedComment entity.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", updatedComment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentRepositoryMockRecorder) UpdateComment(updatedComment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentRepository)(nil).UpdateComment), updatedComment)
}

// MockStarRepository is a mock of StarRepository interface.
type MockStarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStarRepositoryMockRecorder
}

// MockStarRepositoryMockRecorder is the mock recorder for MockStarRepository.
type MockStarRepositoryMockRecorder struct {
	mock *MockStarRepository
}

// NewMockStarRepository creates a new mock instance.
func NewMockStarRepository(ctrl *gomock.Controller) *MockStarRepository {
	mock := &MockStarRepository{ctrl: ctrl}
	mock.recorder = &MockStarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStarRepository) EXPECT() *MockStarRepositoryMockRecorder {
	return m.recorder
}

// DeleteStar mocks base method.
func (m *MockStarRepository) DeleteStar(gistID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStar", gistID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStar indicates an expected call of DeleteStar.
func (mr *MockStarRepositoryMockRecorder) DeleteStar(gistID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStar", reflect.TypeOf((*MockStarRepository)(nil).DeleteStar), gistID, userID)
}

// GetAllStargazers mocks base method.
func (m *MockStarRepository) GetAllStargazers() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllStargazers")
}

// GetAllStargazers indicates an expected call of GetAllStargazers.
func (mr *MockStarRepositoryMockRecorder) GetAllStargazers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStargazers", reflect.TypeOf((*MockStarRepository)(nil).GetAllStargazers))
}

// GetStarredGists mocks base method.
func (m *MockStarRepository) GetStarredGists(userID uuid.UUID) ([]entity.GistRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStarredGists", userID)
	ret0, _ := ret[0].([]entity.GistRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStarredGists indicates an expected call of GetStarredGists.
func (mr *MockStarRepositoryMockRecorder) GetStarredGists(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStarredGists", reflect.TypeOf((*MockStarRepository)(nil).GetStarredGists), userID)
}

// StarGist mocks base method.
func (m *MockStarRepository) StarGist(newStar entity.Star) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StarGist", newStar)
	ret0, _ := ret[0].(error)
	return ret0
}

// StarGist indicates an expected call of StarGist.
func (mr *MockStarRepositoryMockRecorder) StarGist(newStar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StarGist", reflect.TypeOf((*MockStarRepository)(nil).StarGist), newStar)
}
